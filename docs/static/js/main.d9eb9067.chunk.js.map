{"version":3,"sources":["components/emissionsguide.jpg","components/EditButton.jsx","components/Answertable.jsx","components/Question.jsx","components/Survey.jsx","components/Plot.jsx","components/Navbar.jsx","carbonmodel.js","surveyData.js","dataset.js","uuid.js","components/View.jsx","storage.js","components/Settings.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","EditButton","props","react_default","a","createElement","onClick","onclick","Button","size","variant","checked","edit","delete","include","type","id","AnswerTable","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleDelete","bind","assertThisInitialized","keys","answerlist","buildTable","data","_this2","Table","striped","bordered","hover","style","fontSize","map","row","index","buildRow","obj","rowindex","key","className","components_EditButton","event","deleteFunction","target","Component","Question","state","quantity","answer","increase","changeAmount","decrease","changeHours","saveListDataPoint","radioSelect","submitAnswer","deleteFromAnswerList","handleTextInput","q","Fragment","Container","Row","Col","xs","heading","text","getInputForm","getRadioSelectList","quantityButtons","buttonRow","length","Answertable","undefined","previousAnswer","setState","newAnswerList","toConsumableArray","splice","value","onChange","placeholder","defaultName","alternatives","persist","push","mode","questionType","previousQuestion","disabled","isFirstQ","cancel","reportAnswerToSurvey","getAnswer","quantifier","change","Survey","answers","nextQ","name","plot","receiveAnswerFromQuestion","returnToMain","surveydata","questions","surveyComplete","getQuestion","components_Question","dataset","UUID","isLastQ","plotFunction","updatedAnswers","answerObj","reportAnswers","Plot","_this$calculateTotals","calculateTotals","_this$calculateTotals2","slicedToArray","plotObject","total","percent","limit","toFixed","noEmissionTarget","emissionTarget","getPlot","datalist","model","getModel","plotLabelMap","getPlotLabelMap","getPlotObject","values","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_loop","dataObj","label","find","o","x","y","_iterator","Symbol","iterator","next","done","err","return","sum","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Electric car","Train","Bus","Car","Plane, regional","Plane, international","Express boat","Short distance <45 min","Scandinavia 45 min - 2 hrs","Europe 2-4 hrs","Rest of world 4-12 hrs","labels","alreadyAdded","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","es","labelsStyle","height","width","xType","margin","left","bottom","animation","NavBar","Nav","activeKey","onSelect","page","navigate","Item","Link","eventKey","href","title","datasetLength","carbonvalues","CarbonModel","questionObject","nameQuestion","questionHeading","infoText","quantitySelectQuestion","quantityQuestion","selectQuestion","arguments","SurveyData","parameter","buildTripQuestions","buildMeetingQuestions","list","questionlist","Dataset","surveyID","hex","i","toString","r","window","crypto","msCrypto","getRandomValues","Uint8Array","getUUID","View","enabled","Array","datasets","fill","editClick","deleteClick","plotClick","changeView","includeAll","includeNone","plotDataset","newtype","editDataset","confirm","deleteDataset","updatePlot","newEnabledList","storagekey","limitkey","readStorage","localStorage","getItem","getLimits","hasOwnProperty","JSON","parse","tripCarbonLimit","meetingCarbonLimit","getStorage","saveDatasetsToDisk","filename","Date","toISOString","element","document","setAttribute","encodeURIComponent","display","body","appendChild","click","removeChild","Settings","triplimit","meetinglimit","handleTripLimitChange","handleTripLimitSet","handleMeetingLimitChange","handleMeetingLimitSet","zeroDatasets","button","src","emissionsguide","alt","Form","onSubmit","InputGroup","FormControl","aria-label","aria-describedby","Append","clearData","preventDefault","number","Number","limitfunction","App","activeDataSet","innerHeight","CETcolor","receiveAnswersFromSurvey","setPage","setcarbonlimit","updateObject","updateDataSets","isLimit","limits","setItem","stringify","newDataSet","update","clear","Navbar","minHeight","sm","md","getPage","components_Plot","plotType","navigateToPage","datasetID","paramObj","survey","getHomePage","getRegisterPage","getViewPage","getSettingsPage","enabledList","plotList","filter","flatMap","slice","l","components_Settings","components_View","components_Survey","charAt","toUpperCase","updatedData","d","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9eb9067.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/emissionsguide.69c49c1a.jpg\";","import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\nconst EditButton = props => {\r\n  /** This generates the buttons in the View component, which is the list of previously entered trips etc. */\r\n  const styles = {\r\n    edit: \"outline-info\",\r\n    delete: \"outline-dark\",\r\n    include: \"primary\" //\"outline-primary\"\r\n  };\r\n  return (\r\n    <label onClick={props.onclick}>\r\n      <Button\r\n        size=\"sm\"\r\n        variant={props.checked ? styles[props.type] : \"outline-secondary\"}\r\n        id={props.id}\r\n      >\r\n        {props.type}\r\n      </Button>\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default EditButton;\r\n","import React, { Component } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport EditButton from \"./EditButton\";\r\n\r\n/**This component creates the small table next to user inputs when the user\r\n * enters combined mode and quantity data, such as travel type and travel time. */\r\nclass AnswerTable extends Component {\r\n  constructor() {\r\n    super();\r\n    this.handleDelete = this.handleDelete.bind(this);\r\n  }\r\n  render() {\r\n    const keys = Object.keys(this.props.answerlist[0]);\r\n    return this.buildTable(keys, this.props.answerlist);\r\n  }\r\n  buildTable(keys, data) {\r\n    return (\r\n      <Table striped bordered hover size=\"sm\" style={{ fontSize: 13 }}>\r\n        <tbody>\r\n          {data.map((row, index) => this.buildRow(keys, row, index))}\r\n        </tbody>\r\n      </Table>\r\n    );\r\n  }\r\n\r\n  buildRow(keys, obj, rowindex) {\r\n    const style = \"text-center align-middle\";\r\n    return (\r\n      <tr key={\"row\" + rowindex}>\r\n        {keys.map((key, index) => (\r\n          <td key={index + \"-\" + key} className={style}>\r\n            {obj[key]}\r\n          </td>\r\n        ))}\r\n        <td key={\"del\" + rowindex}>\r\n          <EditButton type=\"delete\" id={rowindex} onclick={this.handleDelete} />\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n  handleDelete(event) {\r\n    this.props.deleteFunction(event.target.id);\r\n  }\r\n}\r\n\r\nexport default AnswerTable;\r\n","import React, { Component } from \"react\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport AnswerTable from \"./Answertable\";\r\n\r\nclass Question extends Component {\r\n  /** This component takes in a question from the survey data and renders the appropriate output text and input elements.*/\r\n  state = { quantity: 1, answer: \"\", answerlist: [] };\r\n  constructor() {\r\n    super();\r\n    this.changeHours = this.changeAmount.bind(this);\r\n    this.saveListDataPoint = this.saveListDataPoint.bind(this);\r\n    this.radioSelect = this.radioSelect.bind(this);\r\n    this.submitAnswer = this.submitAnswer.bind(this);\r\n    this.deleteFromAnswerList = this.deleteFromAnswerList.bind(this);\r\n    this.handleTextInput = this.handleTextInput.bind(this);\r\n  }\r\n\r\n  render() {\r\n    const { q } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <Container>\r\n          <Row>\r\n            <Col xs={7}>\r\n              <h3>{q.heading}</h3>\r\n              <p>{q.text}</p>\r\n              {q.type === \"name\" && this.getInputForm(q.type)}\r\n              {(q.type === \"select\" || q.type === \"quantityselect\") &&\r\n                this.getRadioSelectList()}\r\n              {(q.type === \"quantity\" || q.type === \"quantityselect\") &&\r\n                this.quantityButtons(q.type)}\r\n              {this.buttonRow(q.type)}\r\n            </Col>\r\n            <Col>\r\n              {q.type === \"quantityselect\" &&\r\n                this.state.answerlist.length > 0 && (\r\n                  <AnswerTable\r\n                    answerlist={this.state.answerlist}\r\n                    deleteFunction={this.deleteFromAnswerList}\r\n                  />\r\n                )}\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    /** This makes sure the state is properly reset depending on if previous answers are being edited or not. */\r\n    if (this.props.previousAnswer !== undefined) {\r\n      if (this.props.q.type === \"quantityselect\") {\r\n        this.setState({ answerlist: this.props.previousAnswer });\r\n      } else if (this.props.q.type === \"quantity\") {\r\n        this.setState({ quantity: this.props.previousAnswer });\r\n      } else {\r\n        this.setState({ answer: this.props.previousAnswer });\r\n      }\r\n    }\r\n  }\r\n\r\n  deleteFromAnswerList(id) {\r\n    const newAnswerList = [...this.state.answerlist];\r\n    newAnswerList.splice(id, 1);\r\n    this.setState({ answerlist: newAnswerList });\r\n  }\r\n\r\n  getInputForm(type) {\r\n    return (\r\n      <React.Fragment>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.answer}\r\n          onChange={this.handleTextInput}\r\n          placeholder={type === \"name\" ? this.props.defaultName : \"\"}\r\n        />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  getRadioSelectList() {\r\n    return (\r\n      <form>\r\n        <div className=\"form-check\">\r\n          {this.props.q.alternatives.map(a => (\r\n            <div key={a}>\r\n              <label className=\"form-check-label\">\r\n                <input\r\n                  className=\"form-check-input\"\r\n                  type=\"radio\"\r\n                  value={a}\r\n                  checked={this.state.answer === a}\r\n                  onChange={this.radioSelect}\r\n                />\r\n                {a}\r\n              </label>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  handleTextInput(event) {\r\n    this.setState({ answer: event.target.value });\r\n  }\r\n\r\n  radioSelect(event) {\r\n    event.persist();\r\n    this.setState({ answer: event.target.value });\r\n  }\r\n\r\n  saveListDataPoint() {\r\n    const answerlist = [...this.state.answerlist];\r\n    answerlist.push({ mode: this.state.answer, quantity: this.state.quantity });\r\n    this.setState({ answerlist: answerlist });\r\n  }\r\n\r\n  getAnswer(type) {\r\n    switch (type) {\r\n      case \"quantityselect\":\r\n        return this.state.answerlist;\r\n      case \"quantity\":\r\n        return this.state.quantity;\r\n      case \"name\":\r\n        return this.state.answer !== \"\"\r\n          ? this.state.answer\r\n          : this.props.defaultName;\r\n      default:\r\n        return this.state.answer;\r\n    }\r\n  }\r\n\r\n  buttonRow(questionType) {\r\n    const style = \"btn btn-outline-secondary \";\r\n    return (\r\n      <div>\r\n        {/*Previous Button*/}\r\n        <button\r\n          className={style}\r\n          onClick={this.props.previousQuestion}\r\n          disabled={this.props.isFirstQ}\r\n        >\r\n          Previous\r\n        </button>\r\n\r\n        {/*Submit Button*/}\r\n        <button\r\n          className={\"btn btn-primary\"}\r\n          onClick={this.submitAnswer}\r\n          disabled={\r\n            /*Submit button should be disabled on a list question if no\r\n            answerlist have been added yet. On a regular question it should be disabled if\r\n            nothing is selected, but on a simple quantity question it is enabled all the time, as the default answer is valid.\r\n            */\r\n            !/*negate sign used here to make parameters more sensible, as the expression below returning true means\r\n            the button is enabled (disabled=false)*/\r\n            (\r\n              questionType === \"name\" ||\r\n              questionType === \"quantity\" ||\r\n              (questionType === \"quantityselect\" &&\r\n                this.state.answerlist.length > 0) ||\r\n              (questionType !== \"quantityselect\" &&\r\n                this.state.answer.length > 0)\r\n            )\r\n          }\r\n        >\r\n          Next\r\n        </button>\r\n\r\n        <button className={style} onClick={this.props.cancel}>\r\n          Cancel\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  submitAnswer() {\r\n    //this.setState({ answer: null, answerlist: [] });\r\n    this.props.reportAnswerToSurvey(\r\n      this.getAnswer(this.props.q.type),\r\n      this.props.q.type\r\n    );\r\n  }\r\n\r\n  quantityButtons(questionType) {\r\n    const style = \"btn btn-outline-secondary \";\r\n    const quantity = this.state.quantity;\r\n    return (\r\n      <div>\r\n        {this.props.q.quantifier}:\r\n        <br />\r\n        <button className={style} onClick={this.decrease}>\r\n          -\r\n        </button>\r\n        <button className={style + \"w-25\"}>{quantity}</button>\r\n        <button className={style} onClick={this.increase}>\r\n          +\r\n        </button>\r\n        {/*Add Button*/}\r\n        {questionType === \"quantityselect\" && (\r\n          <button\r\n            className={style}\r\n            onClick={this.saveListDataPoint}\r\n            disabled={!this.state.answer}\r\n          >\r\n            Add\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  increase = () => {\r\n    this.changeAmount(1);\r\n  };\r\n\r\n  decrease = () => {\r\n    this.changeAmount(-1);\r\n  };\r\n\r\n  changeAmount(change) {\r\n    const q = this.state.quantity + change;\r\n    if (q > 0) {\r\n      this.setState({\r\n        quantity: q\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default Question;\r\n","import React, { Component } from \"react\";\r\nimport Question from \"./Question\";\r\n\r\nclass Survey extends Component {\r\n  /** This component is how a user enters data. A survey consists of a series of questions.\r\n   * Most of the input forms etc that take user data are defined in the component Question.\r\n   */\r\n  state = { answers: [], nextQ: 0, name: \"\", key: \"\", plot: undefined };\r\n  constructor() {\r\n    super();\r\n    this.receiveAnswerFromQuestion = this.receiveAnswerFromQuestion.bind(this);\r\n    this.previousQuestion = this.previousQuestion.bind(this);\r\n    this.returnToMain = this.returnToMain.bind(this);\r\n    this.cancel = this.cancel.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return this.state.nextQ >= this.props.surveydata.questions.length\r\n      ? this.surveyComplete()\r\n      : this.getQuestion();\r\n  }\r\n\r\n  getQuestion() {\r\n    return (\r\n      <Question\r\n        cancel={this.cancel}\r\n        key={\"Q\" + this.state.nextQ + \":\" + this.props.dataset.UUID}\r\n        q={this.props.surveydata.questions[this.state.nextQ]}\r\n        reportAnswerToSurvey={this.receiveAnswerFromQuestion}\r\n        previousQuestion={this.previousQuestion}\r\n        previousAnswer={\r\n          this.state.answers[this.state.nextQ] ||\r\n          this.props.dataset.answers[this.state.nextQ]\r\n        }\r\n        isLastQ={\r\n          this.state.nextQ === this.props.surveydata.questions.length - 1\r\n        }\r\n        isFirstQ={this.state.nextQ === 0}\r\n        plotFunction={this.props.plotFunction}\r\n        defaultName={this.props.defaultName}\r\n      />\r\n    );\r\n  }\r\n\r\n  /*The lifecycle functions on mount and update are to make sure state is reset properly if the user\r\n  cancels a registration process by clicking on the top menu, for instance jumping to Organize Meeting mid-Plan Trip */\r\n  componentDidMount() {\r\n    this.setState({ key: this.props.dataset.UUID });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.dataset.UUID !== this.state.key) {\r\n      this.setState({\r\n        answers: [],\r\n        nextQ: 0,\r\n        name: \"\",\r\n        key: this.props.dataset.UUID\r\n      });\r\n    }\r\n  }\r\n\r\n  previousQuestion() {\r\n    this.setState({ nextQ: this.state.nextQ - 1 });\r\n  }\r\n\r\n  receiveAnswerFromQuestion(answer, type) {\r\n    const updatedAnswers = [...this.state.answers];\r\n    updatedAnswers[this.state.nextQ] = answer;\r\n    const answerObj = { answers: updatedAnswers, nextQ: this.state.nextQ + 1 };\r\n    if (type === \"name\") {\r\n      answerObj.name = answer === \"\" ? this.props.defaultName : answer;\r\n    }\r\n    this.setState(answerObj);\r\n  }\r\n\r\n  returnToMain() {\r\n    this.props.reportAnswers(\r\n      this.props.dataset,\r\n      this.state.name,\r\n      this.state.answers\r\n    );\r\n  }\r\n\r\n  cancel() {\r\n    //this works by calling the report function with no parameters, which will cause nothing to be saved.\r\n    this.props.reportAnswers();\r\n  }\r\n\r\n  surveyComplete() {\r\n    return (\r\n      <React.Fragment>\r\n        <p>Click to save data. View CO2 charts on Summary page.</p>\r\n        <button className={\"btn btn-primary \"} onClick={this.returnToMain}>\r\n          Save data\r\n        </button>\r\n        <button className={\"btn btn-outline-primary \"} onClick={this.cancel}>\r\n          Cancel\r\n        </button>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Survey;\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  FlexibleWidthXYPlot,\r\n  VerticalGridLines,\r\n  HorizontalGridLines,\r\n  XAxis,\r\n  YAxis,\r\n  VerticalBarSeries\r\n} from \"react-vis\";\r\n/**This component plots the column diagram. It also performs the calculation and conversion to the data type required by\r\n * the React-Vis chart library. Since each chart library typically requires their own type,\r\n * I thought it was best to keep it all in here. React-Vis requires the following data object structure:\r\n *  [\r\n        { x: \"EV\", y: 0 },\r\n        { x: \"Train\", y: 0 },\r\n        { x: \"Bus\", y: 0 },\r\n        { x: \"Car\", y: 0 },\r\n        { x: \"Plane\", y: 0 },\r\n        { x: \"Boat\", y: 0 }\r\n      ];\r\n * A list of objects where each object has two keys, x and y, defining the data point in two dimensions.\r\n */\r\nclass Plot extends Component {\r\n  render() {\r\n    if (this.props.data && this.props.type) {\r\n      const [plotObject, total] = this.calculateTotals(this.props.data);\r\n      const percent = ((total / this.props.limit) * 100).toFixed();\r\n      return (\r\n        <div>\r\n          <b>Total emissions: {total.toFixed(2)} tons CO2e emitted.</b>\r\n          <br />\r\n          {this.props.limit === 0\r\n            ? this.noEmissionTarget()\r\n            : this.emissionTarget(percent)}\r\n          <br />\r\n          <small>Kg CO2e</small>\r\n          {this.getPlot(plotObject)}\r\n        </div>\r\n      );\r\n    } else return \"\"; //no valid data to plot\r\n  }\r\n  emissionTarget(percent) {\r\n    return (\r\n      <b>\r\n        {percent +\r\n          \"% of target for \" +\r\n          this.props.type +\r\n          \"s (\" +\r\n          this.props.limit +\r\n          \" tons CO2e).\"}\r\n      </b>\r\n    );\r\n  }\r\n\r\n  noEmissionTarget() {\r\n    return <small>Set emission targets in Settings</small>;\r\n  }\r\n\r\n  calculateTotals(datalist) {\r\n    const { type } = this.props;\r\n    const model = this.getModel(type);\r\n    const plotLabelMap = this.getPlotLabelMap(type);\r\n    const plotObject = this.getPlotObject(Object.values(plotLabelMap));\r\n    for (const dataObj of datalist) {\r\n      const label = plotLabelMap[dataObj.mode];\r\n      const plotObj = plotObject.find(o => o.x === label);\r\n      plotObj.y += dataObj.quantity * model[dataObj.mode];\r\n    }\r\n    var sum = 0;\r\n    for (const obj of plotObject) {\r\n      sum += obj.y;\r\n    }\r\n    sum = sum / 1000; //change from kg to tons\r\n    return [plotObject, sum];\r\n  }\r\n  getPlotLabelMap(type) {\r\n    /**This is where you define what the labels in the survey data should map to in the plotted data.\r\n     */\r\n    if (type === \"trip\") {\r\n      return {\r\n        \"Electric car\": \"EV\",\r\n        Train: \"Train\",\r\n        Bus: \"Bus\",\r\n        Car: \"Car\",\r\n        \"Plane, regional\": \"Plane\",\r\n        \"Plane, international\": \"Plane\",\r\n        \"Express boat\": \"Boat\"\r\n      };\r\n    } else if (type === \"meeting\") {\r\n      return {\r\n        \"Short distance <45 min\": \"Short\",\r\n        \"Scandinavia 45 min - 2 hrs\": \"Scandinavia\",\r\n        \"Europe 2-4 hrs\": \"Europe\",\r\n        \"Rest of world 4-12 hrs\": \"World\"\r\n      };\r\n    }\r\n  }\r\n\r\n  getPlotObject(labels) {\r\n    /**Generates the data object forming the basis of the plot. A label in this context is a text string which will appear\r\n     * in the chart Since multiple inputs can map to the same output, such as international and regional plane both\r\n     * mapping to Plane, it checks if a label has already been added in an additional object. This costs a little more memory,\r\n     * but is fast and easy to read in the code.\r\n     *\r\n     * It adds all the labels already defined in getPlotMap, so it doesn't need to know the type (trip, meeting etc).\r\n     */\r\n    const plotObject = [];\r\n    const alreadyAdded = {};\r\n    for (const label of labels) {\r\n      if (alreadyAdded[label]) {\r\n        continue;\r\n      } else {\r\n        plotObject.push({ x: label, y: 0 });\r\n        alreadyAdded[label] = true;\r\n      }\r\n    }\r\n    return plotObject;\r\n  }\r\n\r\n  getModel(type) {\r\n    /**If you add a new data registration category beyond trips and meetings, define how the model maps to it here. If it uses\r\n     * the carbon model \"straight from the can\", you can just add it as an OR clause in the first branch.\r\n     */\r\n\r\n    const { model } = this.props.model;\r\n    if (type === \"trip\") {\r\n      return model;\r\n    } else if (type === \"meeting\") {\r\n      return {\r\n        \"Short distance <45 min\": model[\"Plane, regional\"],\r\n        \"Scandinavia 45 min - 2 hrs\": 2 * model[\"Plane, international\"],\r\n        \"Europe 2-4 hrs\": 6 * model[\"Plane, international\"],\r\n        \"Rest of world 4-12 hrs\": 16 * model[\"Plane, international\"]\r\n      };\r\n    }\r\n  }\r\n\r\n  getPlot(data) {\r\n    return (\r\n      <FlexibleWidthXYPlot\r\n        labelsStyle={{\r\n          fontSize: 9\r\n        }}\r\n        height={400}\r\n        width={420}\r\n        xType=\"ordinal\"\r\n        margin={{ left: 70, bottom: 50 }}\r\n      >\r\n        <VerticalGridLines />\r\n        <HorizontalGridLines />\r\n        <XAxis />\r\n        <YAxis />\r\n        <VerticalBarSeries data={data} animation />\r\n      </FlexibleWidthXYPlot>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Plot;\r\n","import React from \"react\";\r\nimport { Nav } from \"react-bootstrap\";\r\n\r\nconst NavBar = props => {\r\n  /**\r\n   * The navigation bar on top of the page.\r\n   */\r\n  //const bgcolor = { backgroundColor: \"#4EBBDF\" }; //The official CET color.\r\n  return (\r\n    <Nav\r\n      variant=\"pills\"\r\n      activeKey=\"null\"\r\n      onSelect={\r\n        page => props.navigate(page)\r\n        /* the parameter \"page\" is a string defined as eventKey in each Nav.Item*/\r\n      }\r\n      className=\"mb-3\"\r\n    >\r\n      <Nav.Item>\r\n        <Nav.Link eventKey=\"home\" href=\"#/home\">\r\n          Home\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        <Nav.Link eventKey=\"trip\" title=\"Item\">\r\n          Plan trip\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        <Nav.Link eventKey=\"meeting\" title=\"Item\">\r\n          Organize meeting\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        <Nav.Link eventKey=\"view\" disabled={!props.datasetLength}>\r\n          Summary\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n      <Nav.Item>\r\n        <Nav.Link eventKey=\"settings\" disabled={false}>\r\n          Settings\r\n        </Nav.Link>\r\n      </Nav.Item>\r\n      {/*\r\n      <NavDropdown title=\"Dropdown\" id=\"nav-dropdown\">\r\n        <NavDropdown.Item eventKey=\"4.1\">Action</NavDropdown.Item>\r\n        <NavDropdown.Item eventKey=\"4.2\">Another action</NavDropdown.Item>\r\n        <NavDropdown.Item eventKey=\"4.3\">Something else here</NavDropdown.Item>\r\n        <NavDropdown.Divider />\r\n        <NavDropdown.Item eventKey=\"4.4\">Separated link</NavDropdown.Item>\r\n      </NavDropdown>*/}\r\n    </Nav>\r\n  );\r\n};\r\n\r\n/*\r\n      <nav className=\"navbar-nav navbar-text container-fluid\" style={bgcolor}>\r\n        <span className=\"text-light ml-3\"> Navigation bar</span>\r\n      </nav>\r\n*/\r\n\r\nexport default NavBar;\r\n","class CarbonModel {\r\n  constructor() {\r\n    this.model = carbonvalues();\r\n    this.quantifier = \"Hours\";\r\n    this.alternatives = Object.keys(this.model);\r\n  }\r\n}\r\n\r\n/*This is a static representation of carbon emission modes and their associated values in grams per passenger-hour of travel*/\r\nconst carbonvalues = () => {\r\n  return {\r\n    \"Electric car\": 1.5,\r\n    Train: 3.1,\r\n    Bus: 3.9,\r\n    Car: 5.6,\r\n    \"Plane, regional\": 110.5,\r\n    \"Plane, international\": 195.3,\r\n    \"Express boat\": 32.1\r\n  };\r\n};\r\n\r\nexport default CarbonModel;\r\n","import CarbonModel from \"./carbonmodel\";\r\n\r\nclass SurveyData {\r\n  /** This class is how the survey, i.e. the list of questions, is passed around the app. The functions within the class are\r\n   *  the static text used to query the user, and the type of question so the interface knows which elements to draw. The\r\n   * functions outside it are more generic definitions that take certain parameters and build coherent question objects.\r\n   * The reason I split these was that I was considering some different way of storing the questions, so you can export the\r\n   * functions outside the class and use them to generate survey data in other classes.\r\n   *\r\n   * There are four question types:\r\n   *\r\n   * \"name\" - This asks the user for the name of the trip. There is logic in the App which handles this question in\r\n   * particular ways, for instance by letting it remain empty and filling in a default name.\r\n   *\r\n   * \"select\" - A list of alternatives, from which the user selects one.\r\n   *\r\n   * \"quantity\" - Asks the user to enter some number. The quantifier is what\r\n   * amount the number pertains to, for instance \"hours\" of travel time.\r\n   *\r\n   * \"quantityselect\" - This combines the two above, so the user can create a list of answers, where each answer is\r\n   * a combination of a quantity of an item selected from a list. An example is the travel question, where the user can for instance\r\n   * enter 4 hours of flying, 10 hours of driving and 2 hours of bus to one journey.\r\n   */\r\n  constructor(parameter) {\r\n    this.model = new CarbonModel();\r\n    this.id = parameter;\r\n    this.questions =\r\n      parameter === \"trip\"\r\n        ? this.buildTripQuestions(this.model)\r\n        : this.buildMeetingQuestions(this.model);\r\n  }\r\n\r\n  buildMeetingQuestions(model) {\r\n    const list = [];\r\n    list.push(\r\n      nameQuestion(\r\n        \"Name of meeting\",\r\n        \"Please register meetings that you organize that involves participants travelling by plane\"\r\n      )\r\n    );\r\n    list.push(\r\n      selectQuestion(\"Type of meeting\", \"\", [\r\n        \"Project meeting / workshop\",\r\n        \"Conference / symposium (national)\",\r\n        \"Conference / symposium (international)\",\r\n        \"Other\"\r\n      ])\r\n    );\r\n    list.push(\r\n      quantityQuestion(\r\n        \"Number of participants\",\r\n        \"Please enter total number of participants at the meeting, i.e. not only those travelling by plane\",\r\n        \"Participants\"\r\n      )\r\n    );\r\n    list.push(\r\n      quantityQuestion(\r\n        \"Duration of meeting\",\r\n        \"Please enter the duration of the meeting (hours)\",\r\n        \"Hours\"\r\n      )\r\n    );\r\n    list.push(\r\n      selectQuestion(\r\n        \"Is streaming or video attendance offered?\",\r\n        \"Video attendance / streaming should be offered when possible\"\r\n      )\r\n    );\r\n    list.push(\r\n      selectQuestion(\r\n        \"Importance\",\r\n        \"Please give your own assessment of the importance of organizing a physical meeting involving air travels\",\r\n        [\"Essential\", \"Very important\", \"Somewhat important\", \"Less important\"]\r\n      )\r\n    );\r\n    list.push(\r\n      quantitySelectQuestion(\r\n        \"Flying participants.\",\r\n        \"Please enter number of participants travelling by plane for each category below. (In the calculations, these are assumed to be roundtrip travels)\",\r\n        [\r\n          \"Short distance <45 min\",\r\n          \"Scandinavia 45 min - 2 hrs\",\r\n          \"Europe 2-4 hrs\",\r\n          \"Rest of world 4-12 hrs\"\r\n        ],\r\n        \"Participants\"\r\n      )\r\n    );\r\n    return list;\r\n  }\r\n\r\n  buildTripQuestions(model) {\r\n    const questionlist = [];\r\n    questionlist.push(nameQuestion(\"Enter name of trip\", \"\"));\r\n    questionlist.push(\r\n      quantitySelectQuestion(\r\n        \"Purpose(s) of trip\",\r\n        \"Please select the purpose(s) and duration (in hrs) of the activities covered by the trip.  One trip may include several activities.\",\r\n        [\r\n          \"Field work\",\r\n          \"Project meeting\",\r\n          \"Meeting with funders\",\r\n          \"Conference, presenting\",\r\n          \"Conference, not presenting\",\r\n          \"Other\"\r\n        ],\r\n        \"Duration of activity (hours)\"\r\n      )\r\n    );\r\n    questionlist.push(\r\n      selectQuestion(\r\n        \"Is streaming or video attendance offered?\",\r\n        \"Video attendance / streaming should be requested when possible\"\r\n      )\r\n    );\r\n    questionlist.push(\r\n      selectQuestion(\r\n        \"Importance\",\r\n        \"Please give your own assessment of the importance of travelling to this/these activity/activities\",\r\n        [\"Essential\", \"Very important\", \"Somewhat important\", \"Less important\"]\r\n      )\r\n    );\r\n    questionlist.push(\r\n      quantitySelectQuestion(\r\n        \"Mode(s) of transport\",\r\n        \"Please enter overall duration for each mode of transport used during the trip\",\r\n        model.alternatives,\r\n        model.quantifier\r\n      )\r\n    );\r\n    return questionlist;\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {The type of question, see above for details} type\r\n * @param {The heading on the question page} heading\r\n * @param {Text which explains the question in some detail to the user} text\r\n * @param {The list of alternatives to choose from. If null, it becomes a Yes/No question} alternatives\r\n * @param {When asking about the quantity of something, the quantifer says what it is, for instance \"hours\"} quantifier\r\n */\r\nfunction questionObject(type, heading, text, alternatives, quantifier) {\r\n  const obj = { type: type, heading: heading, text: text };\r\n  if (alternatives) {\r\n    obj.alternatives = alternatives;\r\n  }\r\n  if (quantifier) {\r\n    obj.quantifier = quantifier;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n *below are the various question types, called the questionObject constructor with various parameters.\r\n Note that the code in the App use the question type to build the page, so you will need to change \r\n logic elsewhere as well if you add new question types.  */\r\n\r\nfunction nameQuestion(questionHeading, infoText) {\r\n  return questionObject(\"name\", questionHeading, infoText, false, false);\r\n}\r\n\r\nfunction quantitySelectQuestion(\r\n  questionHeading,\r\n  infoText,\r\n  alternatives,\r\n  quantifier\r\n) {\r\n  return questionObject(\r\n    \"quantityselect\",\r\n    questionHeading,\r\n    infoText,\r\n    alternatives,\r\n    quantifier\r\n  );\r\n}\r\n\r\nfunction quantityQuestion(questionHeading, infoText, quantifier) {\r\n  return questionObject(\r\n    \"quantity\",\r\n    questionHeading,\r\n    infoText,\r\n    false,\r\n    quantifier\r\n  );\r\n}\r\n\r\nfunction selectQuestion(\r\n  questionHeading,\r\n  infoText,\r\n  alternatives = [\"Yes\", \"No\"] //default alternatives. If called without alternatives, it is interpreted as a Yes/No question.\r\n) {\r\n  return questionObject(\r\n    \"select\",\r\n    questionHeading,\r\n    infoText,\r\n    alternatives,\r\n    false\r\n  );\r\n}\r\n\r\nexport default SurveyData;\r\n","import { getUUID } from \"./uuid\";\r\n\r\nexport class Dataset {\r\n  /** This object contains the data entered by the user. It is identified by the UUID. SurveyID in this context is the\r\n   * identifier used throughout the app such as \"trip\" and \"meeting\".\r\n   */\r\n  constructor(surveyID, UUID, name, answers) {\r\n    this.surveyID = surveyID;\r\n    /*\r\n      If the UUID is provided, it is assumed that answers are provided as well.\r\n      The new object then represents an updated version of the old. \r\n      If it is not provided, a fresh dataset with no answers is returned.\r\n    */\r\n    if (UUID) {\r\n      this.UUID = UUID;\r\n      this.name = name;\r\n      this.answers = answers;\r\n    } else {\r\n      this.UUID = getUUID();\r\n      this.name = name ? name : \"\";\r\n      this.answers = [];\r\n    }\r\n  }\r\n}\r\n","/**\r\n * Generates a universally unique ID to identify datasets.\r\n * I've naively trusted the universe and haven't added collision checks since there is usually just a handful of datasets.\r\n * Source:  https://gist.github.com/jed/982883\r\n */\r\n\r\nexport function getUUID() {\r\n  var hex = [];\r\n\r\n  for (var i = 0; i < 256; i++) {\r\n    hex[i] = (i < 16 ? \"0\" : \"\") + i.toString(16);\r\n  }\r\n  var c = window.crypto || window.msCrypto; //this is required to make it work in MSIE, window.crypto will fail there.\r\n  var r = c.getRandomValues(new Uint8Array(16));\r\n\r\n  r[6] = (r[6] & 0x0f) | 0x40;\r\n  r[8] = (r[8] & 0x3f) | 0x80;\r\n\r\n  return (\r\n    hex[r[0]] +\r\n    hex[r[1]] +\r\n    hex[r[2]] +\r\n    hex[r[3]] +\r\n    \"-\" +\r\n    hex[r[4]] +\r\n    hex[r[5]] +\r\n    \"-\" +\r\n    hex[r[6]] +\r\n    hex[r[7]] +\r\n    \"-\" +\r\n    hex[r[8]] +\r\n    hex[r[9]] +\r\n    \"-\" +\r\n    hex[r[10]] +\r\n    hex[r[11]] +\r\n    hex[r[12]] +\r\n    hex[r[13]] +\r\n    hex[r[14]] +\r\n    hex[r[15]]\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Table, Button } from \"react-bootstrap\";\r\nimport EditButton from \"./EditButton\";\r\n\r\nclass View extends Component {\r\n  /** This component is used to show the entered datasets and generate column diagrams for the user. */\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      type: \"trip\",\r\n      enabled: Array(this.props.datasets.length).fill(true)\r\n    };\r\n    this.editClick = this.editClick.bind(this);\r\n    this.deleteClick = this.deleteClick.bind(this);\r\n    this.plotClick = this.plotClick.bind(this);\r\n    this.changeView = this.changeView.bind(this);\r\n    this.includeAll = this.includeAll.bind(this);\r\n    this.includeNone = this.includeNone.bind(this);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <br />\r\n        <Button variant=\"outline-primary\" onClick={this.changeView}>\r\n          Switch to {this.state.type === \"trip\" ? \"meetings\" : \"trips\"}\r\n        </Button>\r\n        <Button variant=\"outline-primary\" onClick={this.includeAll}>\r\n          Include all\r\n        </Button>\r\n        <Button variant=\"outline-secondary\" onClick={this.includeNone}>\r\n          Include none\r\n        </Button>\r\n\r\n        <br />\r\n        <Table striped bordered hover size=\"sm\">\r\n          {this.buildTable(this.props.datasets, [\r\n            \"Name\",\r\n            \"Edit\",\r\n            \"Delete\",\r\n            \"Include\"\r\n          ])}\r\n        </Table>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.plotDataset(this.state.type, this.state.enabled);\r\n  }\r\n\r\n  changeView() {\r\n    const newtype = this.state.type === \"trip\" ? \"meeting\" : \"trip\";\r\n    this.setState({ type: newtype });\r\n    this.props.plotDataset(newtype, this.state.enabled);\r\n  }\r\n\r\n  buildTable(datasets, keys) {\r\n    return (\r\n      <tbody>\r\n        {datasets.map((obj, index) => this.buildRow(keys, obj, index))}\r\n      </tbody>\r\n    );\r\n  }\r\n\r\n  buildRow(keys, obj, rowindex) {\r\n    const style = \"text-center align-middle\";\r\n    if (obj.surveyID === this.state.type) {\r\n      return (\r\n        <tr key={\"row\" + rowindex}>\r\n          <td key={rowindex + \"-\" + keys[0]} className={style}>\r\n            {obj[\"name\"]}\r\n          </td>\r\n          <td key={rowindex + \"-\" + keys[1]} className={style}>\r\n            <EditButton\r\n              type=\"edit\"\r\n              id={rowindex}\r\n              onclick={this.editClick}\r\n              checked={true}\r\n            />\r\n          </td>\r\n          <td key={rowindex + \"-\" + keys[2]} className={style}>\r\n            <EditButton\r\n              type=\"delete\"\r\n              id={rowindex}\r\n              onclick={this.deleteClick}\r\n              checked={true}\r\n            />\r\n          </td>\r\n          <td key={rowindex + \"-\" + keys[3]} className={style}>\r\n            <EditButton\r\n              type=\"include\"\r\n              id={rowindex}\r\n              onclick={this.plotClick}\r\n              checked={this.state.enabled[rowindex]}\r\n            />\r\n          </td>\r\n        </tr>\r\n      );\r\n    }\r\n  }\r\n\r\n  editClick(event) {\r\n    this.props.editDataset(event.target.id);\r\n  }\r\n\r\n  deleteClick(event) {\r\n    const id = event.target.id;\r\n    if (window.confirm(\"Delete \" + this.props.datasets[id].name + \"?\")) {\r\n      this.props.deleteDataset(id);\r\n    }\r\n  }\r\n\r\n  includeAll() {\r\n    this.updatePlot(\r\n      this.state.type,\r\n      Array(this.props.datasets.length).fill(true)\r\n    );\r\n  }\r\n\r\n  includeNone() {\r\n    this.updatePlot(\r\n      this.state.type,\r\n      Array(this.props.datasets.length).fill(false)\r\n    );\r\n  }\r\n\r\n  updatePlot(type, list) {\r\n    this.props.plotDataset(type, list);\r\n    this.setState({ enabled: list });\r\n  }\r\n\r\n  plotClick(event) {\r\n    const newEnabledList = [...this.state.enabled];\r\n    newEnabledList[event.target.id] = !this.state.enabled[event.target.id];\r\n    //this.props.plotDataset(event.target.id);\r\n    this.updatePlot(this.state.type, newEnabledList);\r\n  }\r\n}\r\n\r\nexport default View;\r\n","//PRIVATE\r\nconst storagekey = \"datasets\";\r\nconst limitkey = \"limits\";\r\n/** These function handle writing data to localstorage. You can expand this to cloud storage without changing code elsewhere,\r\n * given that the basic functionality remains the same.\r\n */\r\nfunction readStorage() {\r\n  return window.localStorage.getItem(storagekey);\r\n}\r\n\r\n//EXPORTS\r\nexport function updateLimits(limits) {\r\n  window.localStorage.setItem(limitkey, JSON.stringify(limits));\r\n}\r\n\r\nexport function getLimits() {\r\n  if (!window.localStorage.hasOwnProperty(limitkey)) {\r\n    return { tripCarbonLimit: 0, meetingCarbonLimit: 0 };\r\n  } else {\r\n    return JSON.parse(window.localStorage.getItem(limitkey));\r\n  }\r\n}\r\n\r\nexport function updateStorage(datasets) {\r\n  window.localStorage.setItem(storagekey, JSON.stringify(datasets));\r\n}\r\n\r\nexport function getStorage() {\r\n  //returns an empty array instead of null, if there is nothing stored.\r\n  return JSON.parse(readStorage()) || [];\r\n}\r\n\r\nexport function clearStorage() {\r\n  window.localStorage.clear();\r\n}\r\n\r\nexport function areThereAnyDatasets() {\r\n  return getStorage().length > 0;\r\n}\r\n\r\nexport function saveDatasetsToDisk() {\r\n  const date = new Date();\r\n  const filename = \"CarbonPlanner-ExportedData-\" + date.toISOString();\r\n  const element = document.createElement(\"a\");\r\n  const text = readStorage();\r\n  /*The above call might return an empty array, which would be useless (and harmless) data,\r\n  but it is guarded by the button not being disabled if datasets length is zero. */\r\n  element.setAttribute(\r\n    \"href\",\r\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\r\n  );\r\n  element.setAttribute(\"download\", filename);\r\n  element.style.display = \"none\";\r\n  document.body.appendChild(element);\r\n  element.click();\r\n  document.body.removeChild(element);\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Button, Form, FormControl, InputGroup } from \"react-bootstrap\";\r\nimport emissionsguide from \"./emissionsguide.jpg\";\r\nimport { areThereAnyDatasets, saveDatasetsToDisk } from \"../storage\";\r\n\r\nclass Settings extends Component {\r\n  /** This component creates the Settings page, where you define your emissions limits and can wipe stored data. */\r\n  constructor() {\r\n    super();\r\n    this.state = { triplimit: 0, meetinglimit: 0 };\r\n    this.handleTripLimitChange = this.handleTripLimitChange.bind(this);\r\n    this.handleTripLimitSet = this.handleTripLimitSet.bind(this);\r\n    this.handleMeetingLimitChange = this.handleMeetingLimitChange.bind(this);\r\n    this.handleMeetingLimitSet = this.handleMeetingLimitSet.bind(this);\r\n  }\r\n\r\n  render() {\r\n    const zeroDatasets = !areThereAnyDatasets();\r\n    const button = \"outline-primary w-50\";\r\n    return (\r\n      <div id=\"settings\">\r\n        <img src={emissionsguide} alt=\"\" />\r\n        <br />\r\n        <br />\r\n        Your CO2 emissions target for travel is{\" \"}\r\n        {this.props.triplimit === 0\r\n          ? \"not yet set.\"\r\n          : this.props.triplimit + \" tons CO2e per year\"}\r\n        <Form\r\n          onSubmit={this.handleTripLimitSet}\r\n          onChange={this.handleTripLimitChange}\r\n        >\r\n          <InputGroup className=\"md-4\">\r\n            <FormControl\r\n              type=\"number\"\r\n              placeholder=\"Target for CO2 emissions (tons) from travel.\"\r\n              aria-label=\"Target for CO2 emissions (tons) from travel.\"\r\n              aria-describedby=\"basic-addon2\"\r\n            />\r\n            <InputGroup.Append>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Set target\r\n              </Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Form>\r\n        <br />\r\n        Your CO2 emissions target for meetings is{\" \"}\r\n        {this.props.meetinglimit === 0\r\n          ? \"not yet set.\"\r\n          : this.props.meetinglimit + \" tons CO2e per year\"}\r\n        <Form\r\n          onSubmit={this.handleMeetingLimitSet}\r\n          onChange={this.handleMeetingLimitChange}\r\n        >\r\n          <InputGroup className=\"md-4\">\r\n            <FormControl\r\n              type=\"number\"\r\n              placeholder=\"Target for CO2 emissions (tons) from meetings.\"\r\n              aria-label=\"Target for CO2 emissions (tons) from meetings.\"\r\n              aria-describedby=\"basic-addon2\"\r\n            />\r\n            <InputGroup.Append>\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Set target\r\n              </Button>\r\n            </InputGroup.Append>\r\n          </InputGroup>\r\n        </Form>\r\n        <br />\r\n        <br />\r\n        <p>\r\n          In this current beta version, data is only stored in this browser. No\r\n          cookies or cloud storage is used. If you clear your browsing history,\r\n          the data will be erased.\r\n        </p>\r\n        <p>\r\n          <Button\r\n            className={button}\r\n            disabled={zeroDatasets}\r\n            onClick={this.props.clearData}\r\n          >\r\n            Clear data from browser\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          <Button className={button} disabled={true}>\r\n            Import data from file\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          <Button\r\n            className={button}\r\n            disabled={zeroDatasets}\r\n            onClick={saveDatasetsToDisk}\r\n          >\r\n            Save data to file\r\n          </Button>\r\n        </p>\r\n        <p>\r\n          <Button className={button} disabled={true}>\r\n            Export to spreadsheet\r\n          </Button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleTripLimitChange(event) {\r\n    this.setState({ triplimit: event.target.value });\r\n  }\r\n\r\n  handleMeetingLimitChange(event) {\r\n    this.setState({ meetinglimit: event.target.value });\r\n  }\r\n\r\n  handleTripLimitSet(event) {\r\n    event.preventDefault();\r\n    const number = Number(this.state.triplimit);\r\n    if (typeof number === \"number\" && number > 0) {\r\n      this.props.limitfunction(\"trip\", number);\r\n    }\r\n  }\r\n  handleMeetingLimitSet(event) {\r\n    event.preventDefault();\r\n    const number = Number(this.state.meetinglimit);\r\n    if (typeof number === \"number\" && number > 0) {\r\n      this.props.limitfunction(\"meeting\", number);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Settings;\r\n","import React, { Component } from \"react\";\nimport Survey from \"./components/Survey\";\nimport Plot from \"./components/Plot\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport NavBar from \"./components/Navbar\";\nimport SurveyData from \"./surveyData\";\nimport { Dataset } from \"./dataset\";\nimport View from \"./components/View\";\nimport {\n  getStorage,\n  updateStorage,\n  updateLimits,\n  getLimits,\n  clearStorage\n} from \"./storage\";\nimport Settings from \"./components/Settings\";\n\n/**This is the main component which draws the page layout, calls on the subcomponents and keeps track of the main states.  */\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      tripCarbonLimit: getLimits().tripCarbonLimit,\n      meetingCarbonLimit: getLimits().meetingCarbonLimit,\n      activeDataSet: undefined,\n      datasets: getStorage(),\n      surveydata: new SurveyData(\"trip\"),\n      plot: undefined,\n      page: \"home\",\n      height: window.innerHeight * 0.6,\n      CETcolor: \"4EBBDF\"\n    };\n    this.plotDataset = this.plotDataset.bind(this);\n    this.receiveAnswersFromSurvey = this.receiveAnswersFromSurvey.bind(this);\n    this.setPage = this.setPage.bind(this);\n    this.editDataset = this.editDataset.bind(this);\n    this.deleteDataset = this.deleteDataset.bind(this);\n    this.setcarbonlimit = this.setcarbonlimit.bind(this);\n    this.clearData = this.clearData.bind(this);\n  }\n\n  setcarbonlimit(type, limit) {\n    const updateObject =\n      type === \"trip\"\n        ? {\n            tripCarbonLimit: limit,\n            meetingCarbonLimit: this.state.meetingCarbonLimit\n          }\n        : {\n            tripCarbonLimit: this.state.tripCarbonLimit,\n            meetingCarbonLimit: limit\n          };\n    this.updateDataSets(updateObject, true);\n  }\n\n  /*To make sure datasets are saved to local storage, use this function\n  to update datasets, instead of calling this.setState directly. Include any other\n  required updates in the updateObject */\n  updateDataSets(updateObject, isLimit) {\n    if (isLimit) {\n      updateLimits(updateObject);\n    } else {\n      updateStorage(updateObject.datasets);\n    }\n\n    this.setState(updateObject);\n  }\n\n  editDataset(index) {\n    this.setPage(\"edit\", index);\n  }\n\n  deleteDataset(index) {\n    const newDataSet = [...this.state.datasets];\n    newDataSet.splice(index, 1);\n    const update = { datasets: newDataSet };\n    if (newDataSet.length === 0) {\n      update.page = \"home\";\n      update.plot = undefined;\n    }\n    this.updateDataSets(update);\n  }\n\n  clearData() {\n    if (window.confirm(\"Clear all data?\")) {\n      clearStorage();\n      this.setState({\n        datasets: [],\n        tripCarbonLimit: 0,\n        meetingCarbonLimit: 0\n      });\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Container className=\"border border-primary rounded mb-0\">\n          <NavBar\n            navigate={this.setPage}\n            datasetLength={this.state.datasets.length}\n          />\n          <Row style={{ minHeight: this.state.height }}>\n            <Col sm={12} md={7} /*className=\"border border-secondary\"*/>\n              {this.getPage()}\n            </Col>\n            {this.state.plot && (\n              <Col /*className=\"border border-secondary\"*/>\n                {this.getPlot()}\n              </Col>\n            )}\n          </Row>\n        </Container>\n      </React.Fragment>\n    );\n  }\n\n  getPlot() {\n    if (this.state.plot) {\n      return (\n        <Plot\n          data={this.state.plot}\n          model={this.state.surveydata.model}\n          type={this.state.plotType}\n          limit={\n            this.state.plotType === \"trip\"\n              ? this.state.tripCarbonLimit\n              : this.state.meetingCarbonLimit\n          }\n        />\n      );\n    } else return \"\";\n  }\n\n  setPage(navigateToPage, datasetID) {\n    const paramObj = {\n      plot: undefined,\n      page:\n        navigateToPage === \"trip\" || navigateToPage === \"meeting\"\n          ? \"register\"\n          : navigateToPage\n    };\n    if (navigateToPage === \"trip\") {\n      const survey = new SurveyData(\"trip\");\n      paramObj.surveydata = survey;\n      paramObj.activeDataSet = new Dataset(\"trip\");\n    } else if (navigateToPage === \"meeting\") {\n      const survey = new SurveyData(\"meeting\");\n      paramObj.surveydata = survey;\n      paramObj.activeDataSet = new Dataset(\"meeting\");\n    } else if (navigateToPage === \"edit\") {\n      const dataset = this.state.datasets[datasetID];\n      paramObj.activeDataSet = dataset;\n      paramObj.surveydata = new SurveyData(dataset.surveyID);\n    } else {\n      paramObj.activeDataSet = undefined;\n    }\n    this.setState(paramObj);\n  }\n\n  getPage() {\n    switch (this.state.page) {\n      case \"home\":\n        return this.getHomePage();\n      case \"register\":\n        return this.getRegisterPage();\n      case \"edit\":\n        return this.getRegisterPage();\n      case \"view\":\n        return this.getViewPage();\n      case \"settings\":\n        return this.getSettingsPage();\n      default:\n        return this.getHomePage();\n    }\n  }\n\n  plotDataset(type, enabledList) {\n    const plotList = this.state.datasets.filter(\n      (dataset, index) => enabledList[index] && dataset.surveyID === type\n    );\n    if (plotList.length > 0) {\n      this.setState({\n        plot: plotList.flatMap(o => o.answers.slice(-1)).flatMap(l => l),\n        plotType: type\n      });\n    } else {\n      this.setState({ plot: undefined, plotType: undefined });\n    }\n  }\n\n  getSettingsPage() {\n    return (\n      <Settings\n        triplimit={this.state.tripCarbonLimit}\n        meetinglimit={this.state.meetingCarbonLimit}\n        limitfunction={this.setcarbonlimit}\n        clearData={this.clearData}\n      />\n    );\n  }\n\n  getViewPage() {\n    return (\n      <View\n        datasets={this.state.datasets}\n        surveydata={this.state.surveydata}\n        editDataset={this.editDataset}\n        deleteDataset={this.deleteDataset}\n        plotDataset={this.plotDataset}\n        triplimit={this.state.tripCarbonLimit}\n        meetinglimit={this.state.meetingCarbonLimit}\n      />\n    );\n  }\n\n  getRegisterPage() {\n    return (\n      <Survey\n        surveydata={this.state.surveydata}\n        defaultName={\n          this.state.activeDataSet.surveyID.charAt(0).toUpperCase() +\n          this.state.activeDataSet.surveyID.slice(1) +\n          \" \" +\n          (this.state.datasets.length + 1)\n        }\n        dataset={this.state.activeDataSet}\n        reportAnswers={this.receiveAnswersFromSurvey}\n        navigate={this.setPage}\n        plotFunction={this.plotObject}\n      />\n    );\n  }\n\n  getHomePage() {\n    return (\n      <React.Fragment>\n        <h4>CET Carbon Planner</h4>\n        The CET Carbon Planner is a CO2 calculator for calculating climate gas\n        emissions from own long-distance travels and from plane travels by\n        participants to meetings organized. It is designed to give an overview\n        of total emissions from own travels and meetings, assuming that this\n        will contribute to raising awareness of own emissions, which is a\n        central element in the CET Low-carbon Travel Policy.\n      </React.Fragment>\n    );\n  }\n\n  receiveAnswersFromSurvey(dataset, name, answers) {\n    if (!dataset) {\n      //used by the cancel button to return to main menu with no changes\n      this.setState({ page: \"home\" });\n    } else {\n      //If the dataset has been edited and updated, the old one will be removed from datasets here:\n      const updatedData = this.state.datasets.filter(\n        d => d.UUID !== dataset.UUID\n      );\n      const newDataSet = new Dataset(\n        dataset.surveyID,\n        dataset.UUID,\n        name,\n        answers\n      );\n      updatedData.push(newDataSet);\n      this.updateDataSets({ datasets: updatedData, page: \"home\" });\n    }\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}